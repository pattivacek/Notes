# Standard cmake line:
cmake ../ -GNinja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SOTA_TOOLS=ON -DBUILD_OSTREE=ON -DFAULT_INJECTION=ON -DSOTA_PACKED_CREDENTIALS=/home/patrick/Documents/creds/prod_here_cred.zip -DCMAKE_C_FLAGS=-fdiagnostics-color=always -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always

# Standard ninja build and test command:
ninja all build_tests format && CTEST_OUTPUT_ON_FAILURE=1 CTEST_PARALLEL_LEVEL=8 ctest


# Connect to Raspberry Pi over serial:
sudo picocom -b 115200 /dev/ttyUSB0


# Build with Docker:
# https://github.com/advancedtelematic/aktualizr#building-with-docker
# Old method:
docker build -t advancedtelematic/aktualizr .

# Run with Docker:
docker run --rm -it advancedtelematic/aktualizr src/scripts/test.sh
docker run --rm -it advancedtelematic/aktualizr src/scripts/coverage.sh

# The following command will get a shell to perform an interactive build, but note that your local working copy will not be synchronised with the Docker container. The recommended development workflow is perform local cmake builds, but passing -v $(pwd):/aktualizr-local to docker run is an alternative.
docker run --rm -it advancedtelematic/aktualizr


# Build with PKCS11 support:
cmake ../ -DBUILD_P11=ON -DTEST_PKCS11_ENGINE_PATH=/usr/lib/x86_64-linux-gnu/engines-1.1/libpkcs11.so -DTEST_PKCS11_MODULE_PATH="/usr/lib/softhsm/libsofthsm2.so"
# Install these:
sudo apt install libengine-pkcs11-openssl opensc libp11-3 libp11-dev softhsm2
# Then run scripts/setup_hsm.sh as sudo. May need to `sudo rm /var/lib/softhsm/tokens/` or change some paths.


# aktualizr-cert-provider usage from bitbake build dir:
tmp/work/x86_64-linux/aktualizr-native/1.0+gitAUTOINC+<hash>-7/build/src/cert-provider/aktualizr-cert-provider -c ~/Documents/creds/<creds>.zip -t qemu -s -u -r -g tmp/work/x86_64-linux/aktualizr-native/1.0+gitAUTOINC+<hash>-7/git/config/sota_implicit_prov_ca.toml


# Find garage-push command:
find tmp/work -iname 'run*ostreepush'
# Should be something like this:
./tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/temp/run.do_image_ostreepush
# Bitbake command to run only that command (although will most likely be cached):
bitbake -c do_image_ostreepush core-image-minimal


# Basic garage-deploy usage (get commit hash with above command):
garage-deploy -f <fetch-creds> -p <push-creds> --commit <hash> -h qemux86-64 --name qemux86-64 --cacert tmp/sysroots-components/x86_64/ca-certificates-native/etc/ssl/certs/ca-certificates.crt
# From bitbake build dir:
tmp/work/x86_64-linux/aktualizr-native/1.0+gitAUTOINC+<hash>-7/build/src/sota_tools/garage-deploy --commit <commit> --name qemux86-64 -f ~/Documents/creds/<creds>.zip -p ~/Documents/creds/<creds>.zip -h qemux86-64 --cacert /etc/ssl/certs/ca-certificates.crt


# Build .debs for release:
./scripts/run_docker_test.sh docker/Dockerfile.ubuntu.bionic -eTEST_INSTALL_DESTDIR=$PWD/temp -- ./scripts/build_ubuntu.sh


# Calculate hash of a json file:
cat <file.json> | jq -M -c --sort-keys . | tr -d '\n' | sha256sum


# Dump contents of a p12 (requires jdk):
keytool -list -v -keystore autoprov_credentials.p12 -storepass ""


# Print OSTree repo tree:
ostree --repo=<repo-path> ls <commit-hash> -RC

# Find latest OSTree repo ref:
cat tmp/deploy/images/qemux86-64/ostree_repo/refs/heads/qemux86-64


